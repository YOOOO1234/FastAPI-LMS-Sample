{"remainingRequest":"/app/my-application/node_modules/babel-loader/lib/index.js!/app/my-application/node_modules/cache-loader/dist/cjs.js??ref--1-0!/app/my-application/node_modules/vue-loader/lib/index.js??vue-loader-options!/app/my-application/src/components/modules/MultipleTextQuestion.vue?vue&type=script&lang=js&","dependencies":[{"path":"/app/my-application/src/components/modules/MultipleTextQuestion.vue","mtime":1653637813516},{"path":"/app/my-application/babel.config.js","mtime":1653637813508},{"path":"/app/my-application/node_modules/cache-loader/dist/cjs.js","mtime":1653637948398},{"path":"/app/my-application/node_modules/babel-loader/lib/index.js","mtime":1653637958391},{"path":"/app/my-application/node_modules/cache-loader/dist/cjs.js","mtime":1653637948398},{"path":"/app/my-application/node_modules/vue-loader/lib/index.js","mtime":1653637954854}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tICIvYXBwL215LWFwcGxpY2F0aW9uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5jb25zdHJ1Y3Rvci5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcubWF0Y2gtYWxsLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc2xpY2UuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3BsaXQuanMiOwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwppbXBvcnQgYXhpb3MgZnJvbSAiYXhpb3MiOwppbXBvcnQgeyBtYXJrZWQgfSBmcm9tICdtYXJrZWQnOwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogIk11bHRpcGxlVGV4dFF1ZXN0aW9uIiwKICBwcm9wczogewogICAgZmxvd19zZXNzaW9uX2lkOiBOdW1iZXIsCiAgICBwYWdlX251bTogTnVtYmVyLAogICAgcGFnZV9jb250ZW50OiBPYmplY3QsCiAgICBibGFua19hbnN3ZXJzOiBBcnJheQogIH0sCiAgd2F0Y2g6IHsKICAgIHBhZ2VfY29udGVudDogewogICAgICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKCkgewogICAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICAgIHRoaXMucGFyc2VfbWQoKTsKICAgICAgICB0aGlzLmJsYW5rX2Fuc3dlciA9IHt9OwogICAgICAgIHRoaXMuYmxhbmtfYW5zd2Vycy5mb3JFYWNoKGZ1bmN0aW9uIChiYSkgewogICAgICAgICAgX3RoaXMuYmxhbmtfYW5zd2VyW2JhLmJsYW5rX2lkXSA9IGJhLmFuc3dlcjsKICAgICAgICB9KTsKICAgICAgfSwKICAgICAgZGVlcDogdHJ1ZQogICAgfQogIH0sCiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCgpIHsKICAgIHdpbmRvdy5NYXRoSmF4Lkh1Yi5RdWV1ZShbIlR5cGVzZXQiLCB3aW5kb3cuTWF0aEpheC5IdWJdKTsKICB9LAogIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQoKSB7CiAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICB3aW5kb3cuTWF0aEpheC5IdWIuQ29uZmlnKHsKICAgICAgdGV4MmpheDogewogICAgICAgIGV4dGVuc2lvbnM6IFsidGV4MmpheC5qcyIsICJUZVgvYm9sZHN5bWJvbC5qcyJdLAogICAgICAgIG1lc3NhZ2VTdHlsZTogIm5vbmUiLAogICAgICAgIGlubGluZU1hdGg6IFtbJyQnLCAnJCddLCBbJ1xcKCcsICdcXCknXV0sCiAgICAgICAgZGlzcGxheU1hdGg6IFtbJyQkJywgJyQkJ10sIFsnXFxbJywgJ1xcXSddXSwKICAgICAgICBwcm9jZXNzRXNjYXBlczogdHJ1ZQogICAgICB9CiAgICB9KTsKICAgIHdpbmRvdy5NYXRoSmF4Lkh1Yi5RdWV1ZShbIlR5cGVzZXQiLCB3aW5kb3cuTWF0aEpheC5IdWJdKTsKICAgIHRoaXMucGFyc2VfbWQoKTsKICAgIHRoaXMuYmxhbmtfYW5zd2Vycy5mb3JFYWNoKGZ1bmN0aW9uIChiYSkgewogICAgICBfdGhpczIuYmxhbmtfYW5zd2VyW2JhLmJsYW5rX2lkXSA9IGJhLmFuc3dlcjsKICAgIH0pOwogIH0sCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIGJsYW5rX2Fuc3dlcjoge30sCiAgICAgIGJsYW5rX3ZhbHVlczoge30sCiAgICAgIHJlcGxhY2VkX2Fuc3dlcl9jb2x1bW5zOiBbXSwKICAgICAgaXNfY29ycmVjdDogIiIKICAgIH07CiAgfSwKICBtZXRob2RzOiB7CiAgICBtYXJrZG93blRvSHRtbDogZnVuY3Rpb24gbWFya2Rvd25Ub0h0bWwobWQpIHsKICAgICAgd2luZG93Lk1hdGhKYXguSHViLlF1ZXVlKFsiVHlwZXNldCIsIHdpbmRvdy5NYXRoSmF4Lkh1Yl0pOwogICAgICByZXR1cm4gbWFya2VkKG1kKTsKICAgIH0sCiAgICBwYXJzZV9tZDogZnVuY3Rpb24gcGFyc2VfbWQoKSB7CiAgICAgIHZhciBfdGhpczMgPSB0aGlzOwoKICAgICAgdmFyIG1kID0gdGhpcy5wYWdlX2NvbnRlbnQuYW5zd2VyX2NvbHVtbl9jb250ZW50OwogICAgICB2YXIgcmVnZXhwID0gL1xbXFtccyo/Lio/XHMqP1xdXF0vZzsKCiAgICAgIHZhciBibGFua3MgPSBfdG9Db25zdW1hYmxlQXJyYXkobWQubWF0Y2hBbGwocmVnZXhwKSk7CgogICAgICBjb25zb2xlLmxvZyhibGFua3MpOwogICAgICBjb25zb2xlLmxvZyhibGFua3NbMF0pOwogICAgICBjb25zb2xlLmxvZyhibGFua3MpOwoKICAgICAgaWYgKGJsYW5rcyA9PT0gInVuZGVmaW5lZCIpIHsKICAgICAgICByZXR1cm4gbWFya2VkKHJlcGxhY2VkX21kKTsKICAgICAgfQoKICAgICAgdmFyIHJlcGxhY2VkX21kID0gbWQ7CiAgICAgIHZhciByZXBsYWNlZF9hbnN3ZXJfY29sdW1ucyA9IFtdOwogICAgICBibGFua3MuZm9yRWFjaChmdW5jdGlvbiAoYmxhbmspIHsKICAgICAgICB2YXIgYmxhbmtfaWQgPSBibGFua1swXS5zbGljZSgyLCAtMik7CiAgICAgICAgX3RoaXMzLmJsYW5rX3ZhbHVlc1tibGFua19pZF0gPSAiIjsKICAgICAgICB2YXIgc3BsaXRlZCA9IHJlcGxhY2VkX21kLnNwbGl0KGJsYW5rWzBdKTsKICAgICAgICByZXBsYWNlZF9hbnN3ZXJfY29sdW1ucy5wdXNoKHsKICAgICAgICAgICJ0eXBlIjogIm1kIiwKICAgICAgICAgICJkYXRhIjogc3BsaXRlZFswXQogICAgICAgIH0pOwogICAgICAgIHJlcGxhY2VkX2Fuc3dlcl9jb2x1bW5zLnB1c2goewogICAgICAgICAgInR5cGUiOiAiYmxhbmsiLAogICAgICAgICAgImRhdGEiOiBibGFua19pZAogICAgICAgIH0pOwogICAgICAgIHJlcGxhY2VkX21kID0gc3BsaXRlZFsxXTsKICAgICAgfSk7CiAgICAgIHRoaXMucmVwbGFjZWRfYW5zd2VyX2NvbHVtbnMgPSByZXBsYWNlZF9hbnN3ZXJfY29sdW1uczsKICAgICAgcmV0dXJuIG1hcmtlZChyZXBsYWNlZF9tZCk7CiAgICB9LAogICAgcmVnaXN0ZXJfYW5zd2VyOiBmdW5jdGlvbiByZWdpc3Rlcl9hbnN3ZXIoKSB7CiAgICAgIHZhciBwYXJhbXMgPSBbXTsKCiAgICAgIGZvciAodmFyIGJsYW5rX2lkIGluIHRoaXMuYmxhbmtfYW5zd2VyKSB7CiAgICAgICAgcGFyYW1zLnB1c2goewogICAgICAgICAgImZsb3dfc2Vzc2lvbl9pZCI6IHRoaXMuZmxvd19zZXNzaW9uX2lkLAogICAgICAgICAgInBhZ2VfbnVtIjogdGhpcy5wYWdlX251bSwKICAgICAgICAgICJibGFua19pZCI6IGJsYW5rX2lkLAogICAgICAgICAgImFuc3dlciI6IHRoaXMuYmxhbmtfYW5zd2VyW2JsYW5rX2lkXQogICAgICAgIH0pOwogICAgICB9CgogICAgICBjb25zb2xlLmxvZyhwYXJhbXMpOwogICAgICB2YXIgY29uZmlnID0gewogICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicKICAgICAgICB9LAogICAgICAgIHdpdGhDcmVkZW50aWFsczogdHJ1ZQogICAgICB9OwogICAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICAgIGF4aW9zLnBvc3QoImh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9yZWdpc3Rlcl9ibGFua19hbnN3ZXIiLCBwYXJhbXMsIGNvbmZpZykudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAvL+WbnuetlOashOaVsOOCkuWPluW+lwogICAgICAgIHZhciBtZDIgPSBzZWxmLnBhZ2VfY29udGVudC5hbnN3ZXJfY29sdW1uX2NvbnRlbnQ7CiAgICAgICAgdmFyIHJlZ2V4cDIgPSAvXFtcW1xzKj8uKj9ccyo/XF1cXS9nOwoKICAgICAgICB2YXIgYmxhbmtzMiA9IF90b0NvbnN1bWFibGVBcnJheShtZDIubWF0Y2hBbGwocmVnZXhwMikpOwoKICAgICAgICB2YXIgYmxhbmtsZW5ndGggPSBibGFua3MyLmxlbmd0aDsKICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZS5kYXRhKTsKICAgICAgICBjb25zb2xlLmxvZyhibGFua2xlbmd0aCk7CiAgICAgICAgc2VsZi5pc19jb3JyZWN0ID0gIiI7CiAgICAgICAgY29uc29sZS5sb2cocmVzcG9uc2UuZGF0YS5sZW5ndGgpOwogICAgICAgIHNlbGYuY250ID0gMDsgLy8g5q2j6Kej44Gu5pWw44KS44Kr44Km44Oz44OICgogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzcG9uc2UuZGF0YS5sZW5ndGg7IGkrKykgewogICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGFbaV1bImlzX2NvcnJlY3QiXSA9PSB0cnVlKSB7CiAgICAgICAgICAgIHNlbGYuY250Kys7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBjb25zb2xlLmxvZyhzZWxmLmNudCk7IC8vIOWFqOWVj+ato+ino+OBquOCieato+ino+OBqOihqOekugoKICAgICAgICBpZiAoc2VsZi5jbnQgPT0gYmxhbmtsZW5ndGgpIHsKICAgICAgICAgIHNlbGYuaXNfY29ycmVjdCA9ICLmraPop6PjgafjgZnvvIHvvIEiOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBzZWxmLmlzX2NvcnJlY3QgPSAi5LiN5q2j6Kej44Gn44GZIjsKICAgICAgICB9CiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikgewogICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTsKICAgICAgfSk7CiAgICB9CiAgfQp9Ow=="},{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CA;AACA;AAEA;AACAA,8BADA;AAEAC;AACAC,2BADA;AAEAC,oBAFA;AAGAC,wBAHA;AAIAC;AAJA,GAFA;AAQAC;AACAF;AACAG;AAAA;;AACA;AACA;AACA;AACA;AACA,SAFA;AAGA,OAPA;AAQAC;AARA;AADA,GARA;AAoBAC,SApBA,qBAoBA;AACAC;AACA,GAtBA;AAuBAC;AAAA;;AACAD;AACAE;AACAC,uDADA;AAEAC,4BAFA;AAGAC,gDAHA;AAIAC,mDAJA;AAKAC;AALA;AADA;AASAP;AAEA;AACA;AACA;AACA,KAFA;AAGA,GAvCA;AAwCAQ;AAAA;AACAC,sBADA;AAEAC,sBAFA;AAGAC,iCAHA;AAIAC;AAJA;AAAA,GAxCA;AA8CAC;AACAC,kBADA,0BACAC,EADA,EACA;AACAf;AACA;AACA,KAJA;AAKAgB,YALA,sBAKA;AAAA;;AACA;AACA;;AACA;;AACAC;AACAA;AACAA;;AAEA;AACA;AACA;;AACA;AACA;AACAC;AACA;AACA;AACA;AACAP;AAAA;AAAA;AAAA;AACAA;AAAA;AAAA;AAAA;AACAQ;AACA,OAPA;AAQA;AACA;AACA,KA5BA;AA8BAC,mBA9BA,6BA8BA;AACA;;AACA;AACAC;AACA,iDADA;AAEA,mCAFA;AAGA,8BAHA;AAIA;AAJA;AAMA;;AACAJ;AACA;AACAK;AACA;AADA,SADA;AAIAC;AAJA;AAMA;AACAC,gFACAC,IADA,CACA;AACA;AACA;AACA;;AACA;;AACA;AACAR;AACAA;AACAS;AACAT;AACAS,qBAVA,CAUA;;AACA;AACA;AACAA;AACA;AACA;;AACAT,8BAhBA,CAiBA;;AACA;AACAS;AACA,SAFA,MAEA;AACAA;AACA;AACA,OAxBA,EAwBAC,KAxBA,CAyBA;AACAV;AACA,OA3BA;AA6BA;AA7EA;AA9CA","names":["name","props","flow_session_id","page_num","page_content","blank_answers","watch","handler","deep","mounted","window","created","tex2jax","extensions","messageStyle","inlineMath","displayMath","processEscapes","data","blank_answer","blank_values","replaced_answer_columns","is_correct","methods","markdownToHtml","md","parse_md","console","blanks","replaced_md","register_answer","params","headers","withCredentials","axios","then","self","catch"],"sources":["MultipleTextQuestion.vue"],"sourcesContent":["<template>\n    <v-container class=\"pa-0\">\n      <v-responsive :min-height=\"300\">\n        <v-container>\n          <div v-html=\"markdownToHtml(page_content.content)\"></div>\n        </v-container>\n      </v-responsive>\n      <v-container class=\"pa-0\">\n        <div :class=\"`rounded-lg`\" class=\"pa-8 grey lighten-3 text-no-wrap\"  >\n          <v-row v-for=\"answer_column in this.replaced_answer_columns\" :key=answer_column.data>\n            <div v-html=\"markdownToHtml(answer_column.data)\" v-if=\"answer_column.type=='md'\"></div>\n            <v-text-field\n              v-if=\"answer_column.type=='blank'\"\n              background-color=\"white\"\n              label=\"回答を入力\"\n              v-model= \"blank_answer[answer_column.data]\"\n              filled\n            ></v-text-field>\n          </v-row>\n          <v-row align=\"end\" justify=\"end\">\n            <v-btn @click=\"register_answer()\" color=\"primary\" width=\"100\"> 回答する </v-btn>\n            </v-row>\n        </div>\n      </v-container>\n      <v-container class=\"pa-0 mt-4\">\n        <div :class=\"`rounded-lg`\" class=\"pa-6 mt-6 green lighten-5 text-no-wrap\" v-if=\"is_correct=='正解です！！'\">\n          <v-row>\n            {{is_correct}}\n          </v-row>\n        </div>\n        <div :class=\"`rounded-lg`\" class=\"pa-6 mt-6 red lighten-5 text-no-wrap\" v-if=\"is_correct=='不正解です'\">\n          <v-row>\n            {{is_correct}}\n          </v-row>\n          <v-row>\n            解説：数列の和の公式を確認しよう！！\n          </v-row>\n        </div>\n      </v-container>\n    </v-container>\n</template>\n<script>\nimport axios from \"axios\";\nimport { marked } from 'marked';\n\nexport default {\n  name: \"MultipleTextQuestion\",\n  props: {\n    flow_session_id: Number,\n    page_num: Number,\n    page_content: Object,\n    blank_answers: Array,\n  },\n  watch: {\n    page_content: {\n      handler: function () {\n        this.parse_md()\n        this.blank_answer = {}\n        this.blank_answers.forEach(ba => {\n          this.blank_answer[ba.blank_id] = ba.answer\n        });\n      },\n      deep: true\n    }\n  },\n  mounted() {\n   window.MathJax.Hub.Queue([\"Typeset\", window.MathJax.Hub]);\n  },\n  created: function() {\n    window.MathJax.Hub.Config({\n        tex2jax:{\n          extensions: [\"tex2jax.js\", \"TeX/boldsymbol.js\"],\n          messageStyle: \"none\",\n          inlineMath: [['$','$'],['\\\\(','\\\\)']],\n          displayMath: [['$$','$$'],['\\\\[','\\\\]']],\n          processEscapes: true\n        }\n    });\n    window.MathJax.Hub.Queue([\"Typeset\", window.MathJax.Hub]);\n\n    this.parse_md()\n    this.blank_answers.forEach(ba => {\n      this.blank_answer[ba.blank_id] = ba.answer\n    });\n  },\n  data: () => ({\n    blank_answer: {},\n    blank_values: {},\n    replaced_answer_columns: [],\n    is_correct: \"\"\n  }),\n  methods:{\n    markdownToHtml(md){\n      window.MathJax.Hub.Queue([\"Typeset\", window.MathJax.Hub]);\n      return marked(md);\n    },\n    parse_md(){\n      const md = this.page_content.answer_column_content\n      const regexp = /\\[\\[\\s*?.*?\\s*?\\]\\]/g\n      const blanks = [...md.matchAll(regexp)]\n      console.log(blanks)\n      console.log(blanks[0])\n      console.log(blanks)\n\n      if (blanks === \"undefined\") {\n        return marked(replaced_md)\n      }\n      let replaced_md = md\n      let replaced_answer_columns = []\n      blanks.forEach(blank => {\n        let blank_id = blank[0].slice(2,-2)\n        this.blank_values[blank_id] = \"\"\n        const splited = replaced_md.split(blank[0])\n        replaced_answer_columns.push({\"type\":\"md\", \"data\": splited[0]})\n        replaced_answer_columns.push({\"type\":\"blank\", \"data\": blank_id})\n        replaced_md = splited[1]\n      });\n      this.replaced_answer_columns = replaced_answer_columns\n      return marked(replaced_md)\n    },\n\n    register_answer(){\n      const params = []\n      for (const blank_id in this.blank_answer){\n        params.push({\n          \"flow_session_id\": this.flow_session_id,\n          \"page_num\": this.page_num,\n          \"blank_id\": blank_id,\n          \"answer\": this.blank_answer[blank_id]\n        })\n      }\n      console.log(params)\n      const config = {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        withCredentials: true\n      };\n      let self = this\n      axios.post(`http://localhost:8000/register_blank_answer`, params, config)\n      .then(function(response){\n        //回答欄数を取得\n        const md2 = self.page_content.answer_column_content\n        const regexp2 = /\\[\\[\\s*?.*?\\s*?\\]\\]/g\n        const blanks2 = [...md2.matchAll(regexp2)]\n        var blanklength = blanks2.length\n        console.log(response.data)\n        console.log(blanklength)\n        self.is_correct =\"\"\n        console.log(response.data.length)\n        self.cnt = 0 // 正解の数をカウント\n        for(let i=0; i< response.data.length; i++){\n          if(response.data[i][\"is_correct\"] == true){\n            self.cnt ++\n          }\n        }\n        console.log(self.cnt)\n        // 全問正解なら正解と表示\n        if(self.cnt == blanklength){\n          self.is_correct=\"正解です！！\"\n        }else{\n          self.is_correct=\"不正解です\"\n        }\n      }).catch(\n        function(error){\n          console.log(error)\n        }\n      )\n    },\n  },\n};\n</script>\n"],"sourceRoot":"src/components/modules"}]}