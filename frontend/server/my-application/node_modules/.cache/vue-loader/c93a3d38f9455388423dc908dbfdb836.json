{"remainingRequest":"/app/my-application/node_modules/vue-loader/lib/index.js??vue-loader-options!/app/my-application/src/components/modules/MultipleTextQuestion.vue?vue&type=script&lang=js&","dependencies":[{"path":"/app/my-application/src/components/modules/MultipleTextQuestion.vue","mtime":1653637813516},{"path":"/app/my-application/node_modules/cache-loader/dist/cjs.js","mtime":1653637948398},{"path":"/app/my-application/node_modules/babel-loader/lib/index.js","mtime":1653637958391},{"path":"/app/my-application/node_modules/cache-loader/dist/cjs.js","mtime":1653637948398},{"path":"/app/my-application/node_modules/vue-loader/lib/index.js","mtime":1653637954854}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBheGlvcyBmcm9tICJheGlvcyI7CmltcG9ydCB7IG1hcmtlZCB9IGZyb20gJ21hcmtlZCc7CgpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogIk11bHRpcGxlVGV4dFF1ZXN0aW9uIiwKICBwcm9wczogewogICAgZmxvd19zZXNzaW9uX2lkOiBOdW1iZXIsCiAgICBwYWdlX251bTogTnVtYmVyLAogICAgcGFnZV9jb250ZW50OiBPYmplY3QsCiAgICBibGFua19hbnN3ZXJzOiBBcnJheSwKICB9LAogIHdhdGNoOiB7CiAgICBwYWdlX2NvbnRlbnQ6IHsKICAgICAgaGFuZGxlcjogZnVuY3Rpb24gKCkgewogICAgICAgIHRoaXMucGFyc2VfbWQoKQogICAgICAgIHRoaXMuYmxhbmtfYW5zd2VyID0ge30KICAgICAgICB0aGlzLmJsYW5rX2Fuc3dlcnMuZm9yRWFjaChiYSA9PiB7CiAgICAgICAgICB0aGlzLmJsYW5rX2Fuc3dlcltiYS5ibGFua19pZF0gPSBiYS5hbnN3ZXIKICAgICAgICB9KTsKICAgICAgfSwKICAgICAgZGVlcDogdHJ1ZQogICAgfQogIH0sCiAgbW91bnRlZCgpIHsKICAgd2luZG93Lk1hdGhKYXguSHViLlF1ZXVlKFsiVHlwZXNldCIsIHdpbmRvdy5NYXRoSmF4Lkh1Yl0pOwogIH0sCiAgY3JlYXRlZDogZnVuY3Rpb24oKSB7CiAgICB3aW5kb3cuTWF0aEpheC5IdWIuQ29uZmlnKHsKICAgICAgICB0ZXgyamF4OnsKICAgICAgICAgIGV4dGVuc2lvbnM6IFsidGV4MmpheC5qcyIsICJUZVgvYm9sZHN5bWJvbC5qcyJdLAogICAgICAgICAgbWVzc2FnZVN0eWxlOiAibm9uZSIsCiAgICAgICAgICBpbmxpbmVNYXRoOiBbWyckJywnJCddLFsnXFwoJywnXFwpJ11dLAogICAgICAgICAgZGlzcGxheU1hdGg6IFtbJyQkJywnJCQnXSxbJ1xcWycsJ1xcXSddXSwKICAgICAgICAgIHByb2Nlc3NFc2NhcGVzOiB0cnVlCiAgICAgICAgfQogICAgfSk7CiAgICB3aW5kb3cuTWF0aEpheC5IdWIuUXVldWUoWyJUeXBlc2V0Iiwgd2luZG93Lk1hdGhKYXguSHViXSk7CgogICAgdGhpcy5wYXJzZV9tZCgpCiAgICB0aGlzLmJsYW5rX2Fuc3dlcnMuZm9yRWFjaChiYSA9PiB7CiAgICAgIHRoaXMuYmxhbmtfYW5zd2VyW2JhLmJsYW5rX2lkXSA9IGJhLmFuc3dlcgogICAgfSk7CiAgfSwKICBkYXRhOiAoKSA9PiAoewogICAgYmxhbmtfYW5zd2VyOiB7fSwKICAgIGJsYW5rX3ZhbHVlczoge30sCiAgICByZXBsYWNlZF9hbnN3ZXJfY29sdW1uczogW10sCiAgICBpc19jb3JyZWN0OiAiIgogIH0pLAogIG1ldGhvZHM6ewogICAgbWFya2Rvd25Ub0h0bWwobWQpewogICAgICB3aW5kb3cuTWF0aEpheC5IdWIuUXVldWUoWyJUeXBlc2V0Iiwgd2luZG93Lk1hdGhKYXguSHViXSk7CiAgICAgIHJldHVybiBtYXJrZWQobWQpOwogICAgfSwKICAgIHBhcnNlX21kKCl7CiAgICAgIGNvbnN0IG1kID0gdGhpcy5wYWdlX2NvbnRlbnQuYW5zd2VyX2NvbHVtbl9jb250ZW50CiAgICAgIGNvbnN0IHJlZ2V4cCA9IC9cW1xbXHMqPy4qP1xzKj9cXVxdL2cKICAgICAgY29uc3QgYmxhbmtzID0gWy4uLm1kLm1hdGNoQWxsKHJlZ2V4cCldCiAgICAgIGNvbnNvbGUubG9nKGJsYW5rcykKICAgICAgY29uc29sZS5sb2coYmxhbmtzWzBdKQogICAgICBjb25zb2xlLmxvZyhibGFua3MpCgogICAgICBpZiAoYmxhbmtzID09PSAidW5kZWZpbmVkIikgewogICAgICAgIHJldHVybiBtYXJrZWQocmVwbGFjZWRfbWQpCiAgICAgIH0KICAgICAgbGV0IHJlcGxhY2VkX21kID0gbWQKICAgICAgbGV0IHJlcGxhY2VkX2Fuc3dlcl9jb2x1bW5zID0gW10KICAgICAgYmxhbmtzLmZvckVhY2goYmxhbmsgPT4gewogICAgICAgIGxldCBibGFua19pZCA9IGJsYW5rWzBdLnNsaWNlKDIsLTIpCiAgICAgICAgdGhpcy5ibGFua192YWx1ZXNbYmxhbmtfaWRdID0gIiIKICAgICAgICBjb25zdCBzcGxpdGVkID0gcmVwbGFjZWRfbWQuc3BsaXQoYmxhbmtbMF0pCiAgICAgICAgcmVwbGFjZWRfYW5zd2VyX2NvbHVtbnMucHVzaCh7InR5cGUiOiJtZCIsICJkYXRhIjogc3BsaXRlZFswXX0pCiAgICAgICAgcmVwbGFjZWRfYW5zd2VyX2NvbHVtbnMucHVzaCh7InR5cGUiOiJibGFuayIsICJkYXRhIjogYmxhbmtfaWR9KQogICAgICAgIHJlcGxhY2VkX21kID0gc3BsaXRlZFsxXQogICAgICB9KTsKICAgICAgdGhpcy5yZXBsYWNlZF9hbnN3ZXJfY29sdW1ucyA9IHJlcGxhY2VkX2Fuc3dlcl9jb2x1bW5zCiAgICAgIHJldHVybiBtYXJrZWQocmVwbGFjZWRfbWQpCiAgICB9LAoKICAgIHJlZ2lzdGVyX2Fuc3dlcigpewogICAgICBjb25zdCBwYXJhbXMgPSBbXQogICAgICBmb3IgKGNvbnN0IGJsYW5rX2lkIGluIHRoaXMuYmxhbmtfYW5zd2VyKXsKICAgICAgICBwYXJhbXMucHVzaCh7CiAgICAgICAgICAiZmxvd19zZXNzaW9uX2lkIjogdGhpcy5mbG93X3Nlc3Npb25faWQsCiAgICAgICAgICAicGFnZV9udW0iOiB0aGlzLnBhZ2VfbnVtLAogICAgICAgICAgImJsYW5rX2lkIjogYmxhbmtfaWQsCiAgICAgICAgICAiYW5zd2VyIjogdGhpcy5ibGFua19hbnN3ZXJbYmxhbmtfaWRdCiAgICAgICAgfSkKICAgICAgfQogICAgICBjb25zb2xlLmxvZyhwYXJhbXMpCiAgICAgIGNvbnN0IGNvbmZpZyA9IHsKICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nCiAgICAgICAgfSwKICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRydWUKICAgICAgfTsKICAgICAgbGV0IHNlbGYgPSB0aGlzCiAgICAgIGF4aW9zLnBvc3QoYGh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9yZWdpc3Rlcl9ibGFua19hbnN3ZXJgLCBwYXJhbXMsIGNvbmZpZykKICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpewogICAgICAgIC8v5Zue562U5qyE5pWw44KS5Y+W5b6XCiAgICAgICAgY29uc3QgbWQyID0gc2VsZi5wYWdlX2NvbnRlbnQuYW5zd2VyX2NvbHVtbl9jb250ZW50CiAgICAgICAgY29uc3QgcmVnZXhwMiA9IC9cW1xbXHMqPy4qP1xzKj9cXVxdL2cKICAgICAgICBjb25zdCBibGFua3MyID0gWy4uLm1kMi5tYXRjaEFsbChyZWdleHAyKV0KICAgICAgICB2YXIgYmxhbmtsZW5ndGggPSBibGFua3MyLmxlbmd0aAogICAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlLmRhdGEpCiAgICAgICAgY29uc29sZS5sb2coYmxhbmtsZW5ndGgpCiAgICAgICAgc2VsZi5pc19jb3JyZWN0ID0iIgogICAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlLmRhdGEubGVuZ3RoKQogICAgICAgIHNlbGYuY250ID0gMCAvLyDmraPop6Pjga7mlbDjgpLjgqvjgqbjg7Pjg4gKICAgICAgICBmb3IobGV0IGk9MDsgaTwgcmVzcG9uc2UuZGF0YS5sZW5ndGg7IGkrKyl7CiAgICAgICAgICBpZihyZXNwb25zZS5kYXRhW2ldWyJpc19jb3JyZWN0Il0gPT0gdHJ1ZSl7CiAgICAgICAgICAgIHNlbGYuY250ICsrCiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGNvbnNvbGUubG9nKHNlbGYuY250KQogICAgICAgIC8vIOWFqOWVj+ato+ino+OBquOCieato+ino+OBqOihqOekugogICAgICAgIGlmKHNlbGYuY250ID09IGJsYW5rbGVuZ3RoKXsKICAgICAgICAgIHNlbGYuaXNfY29ycmVjdD0i5q2j6Kej44Gn44GZ77yB77yBIgogICAgICAgIH1lbHNlewogICAgICAgICAgc2VsZi5pc19jb3JyZWN0PSLkuI3mraPop6PjgafjgZkiCiAgICAgICAgfQogICAgICB9KS5jYXRjaCgKICAgICAgICBmdW5jdGlvbihlcnJvcil7CiAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcikKICAgICAgICB9CiAgICAgICkKICAgIH0sCiAgfSwKfTsK"},{"version":3,"sources":["MultipleTextQuestion.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"MultipleTextQuestion.vue","sourceRoot":"src/components/modules","sourcesContent":["<template>\n    <v-container class=\"pa-0\">\n      <v-responsive :min-height=\"300\">\n        <v-container>\n          <div v-html=\"markdownToHtml(page_content.content)\"></div>\n        </v-container>\n      </v-responsive>\n      <v-container class=\"pa-0\">\n        <div :class=\"`rounded-lg`\" class=\"pa-8 grey lighten-3 text-no-wrap\"  >\n          <v-row v-for=\"answer_column in this.replaced_answer_columns\" :key=answer_column.data>\n            <div v-html=\"markdownToHtml(answer_column.data)\" v-if=\"answer_column.type=='md'\"></div>\n            <v-text-field\n              v-if=\"answer_column.type=='blank'\"\n              background-color=\"white\"\n              label=\"回答を入力\"\n              v-model= \"blank_answer[answer_column.data]\"\n              filled\n            ></v-text-field>\n          </v-row>\n          <v-row align=\"end\" justify=\"end\">\n            <v-btn @click=\"register_answer()\" color=\"primary\" width=\"100\"> 回答する </v-btn>\n            </v-row>\n        </div>\n      </v-container>\n      <v-container class=\"pa-0 mt-4\">\n        <div :class=\"`rounded-lg`\" class=\"pa-6 mt-6 green lighten-5 text-no-wrap\" v-if=\"is_correct=='正解です！！'\">\n          <v-row>\n            {{is_correct}}\n          </v-row>\n        </div>\n        <div :class=\"`rounded-lg`\" class=\"pa-6 mt-6 red lighten-5 text-no-wrap\" v-if=\"is_correct=='不正解です'\">\n          <v-row>\n            {{is_correct}}\n          </v-row>\n          <v-row>\n            解説：数列の和の公式を確認しよう！！\n          </v-row>\n        </div>\n      </v-container>\n    </v-container>\n</template>\n<script>\nimport axios from \"axios\";\nimport { marked } from 'marked';\n\nexport default {\n  name: \"MultipleTextQuestion\",\n  props: {\n    flow_session_id: Number,\n    page_num: Number,\n    page_content: Object,\n    blank_answers: Array,\n  },\n  watch: {\n    page_content: {\n      handler: function () {\n        this.parse_md()\n        this.blank_answer = {}\n        this.blank_answers.forEach(ba => {\n          this.blank_answer[ba.blank_id] = ba.answer\n        });\n      },\n      deep: true\n    }\n  },\n  mounted() {\n   window.MathJax.Hub.Queue([\"Typeset\", window.MathJax.Hub]);\n  },\n  created: function() {\n    window.MathJax.Hub.Config({\n        tex2jax:{\n          extensions: [\"tex2jax.js\", \"TeX/boldsymbol.js\"],\n          messageStyle: \"none\",\n          inlineMath: [['$','$'],['\\\\(','\\\\)']],\n          displayMath: [['$$','$$'],['\\\\[','\\\\]']],\n          processEscapes: true\n        }\n    });\n    window.MathJax.Hub.Queue([\"Typeset\", window.MathJax.Hub]);\n\n    this.parse_md()\n    this.blank_answers.forEach(ba => {\n      this.blank_answer[ba.blank_id] = ba.answer\n    });\n  },\n  data: () => ({\n    blank_answer: {},\n    blank_values: {},\n    replaced_answer_columns: [],\n    is_correct: \"\"\n  }),\n  methods:{\n    markdownToHtml(md){\n      window.MathJax.Hub.Queue([\"Typeset\", window.MathJax.Hub]);\n      return marked(md);\n    },\n    parse_md(){\n      const md = this.page_content.answer_column_content\n      const regexp = /\\[\\[\\s*?.*?\\s*?\\]\\]/g\n      const blanks = [...md.matchAll(regexp)]\n      console.log(blanks)\n      console.log(blanks[0])\n      console.log(blanks)\n\n      if (blanks === \"undefined\") {\n        return marked(replaced_md)\n      }\n      let replaced_md = md\n      let replaced_answer_columns = []\n      blanks.forEach(blank => {\n        let blank_id = blank[0].slice(2,-2)\n        this.blank_values[blank_id] = \"\"\n        const splited = replaced_md.split(blank[0])\n        replaced_answer_columns.push({\"type\":\"md\", \"data\": splited[0]})\n        replaced_answer_columns.push({\"type\":\"blank\", \"data\": blank_id})\n        replaced_md = splited[1]\n      });\n      this.replaced_answer_columns = replaced_answer_columns\n      return marked(replaced_md)\n    },\n\n    register_answer(){\n      const params = []\n      for (const blank_id in this.blank_answer){\n        params.push({\n          \"flow_session_id\": this.flow_session_id,\n          \"page_num\": this.page_num,\n          \"blank_id\": blank_id,\n          \"answer\": this.blank_answer[blank_id]\n        })\n      }\n      console.log(params)\n      const config = {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        withCredentials: true\n      };\n      let self = this\n      axios.post(`http://localhost:8000/register_blank_answer`, params, config)\n      .then(function(response){\n        //回答欄数を取得\n        const md2 = self.page_content.answer_column_content\n        const regexp2 = /\\[\\[\\s*?.*?\\s*?\\]\\]/g\n        const blanks2 = [...md2.matchAll(regexp2)]\n        var blanklength = blanks2.length\n        console.log(response.data)\n        console.log(blanklength)\n        self.is_correct =\"\"\n        console.log(response.data.length)\n        self.cnt = 0 // 正解の数をカウント\n        for(let i=0; i< response.data.length; i++){\n          if(response.data[i][\"is_correct\"] == true){\n            self.cnt ++\n          }\n        }\n        console.log(self.cnt)\n        // 全問正解なら正解と表示\n        if(self.cnt == blanklength){\n          self.is_correct=\"正解です！！\"\n        }else{\n          self.is_correct=\"不正解です\"\n        }\n      }).catch(\n        function(error){\n          console.log(error)\n        }\n      )\n    },\n  },\n};\n</script>\n"]}]}